require 'spec/spec_helper'

describe LogicalAuthz::Helper do
  before do
    @group = FactoryGirl.create(:group)
    FactoryGirl.create(:permission, :group => @group, :controller => "projects")
    FactoryGirl.create(:permission, :group => @group, :controller => "work_units", :action => "edit", :subject_id => 1)
  end

  describe "URL helpers:" do
    before do
      user = FactoryGirl.create(:user, :groups => [@group])
      authenticate(user)
      @project = FactoryGirl.create(:project)
      @client = FactoryGirl.create(:client)
    end

    describe "authorized_url?" do
      it "should permit {:controller => 'projects', :action => 'show', :id => #}" do
        helper.authorized_url?({:controller => 'projects', :action => 'show', :id => @project.id}).should be_true
      end

      it "should forbid {:controller => 'clients', :action => 'destroy', :id => 1}" do
        helper.authorized_url?({:controller => 'clients', :action => 'destroy', :id => @client.id}).should be_false
      end

      it "should permit edit_project_path(@project.id)" do
        helper.authorized_url?(edit_project_path(@project.id)).should be_true
      end

      it "should permit project_path(@project.id), :method => :put" do
        helper.authorized_url?(project_path(@project.id), :method => :put).should be_true
      end

      it "should forbid edit_client_path(@client.id)" do
        helper.authorized_url?(edit_client_path(@client.id)).should be_false
      end

      it "should permit edit_project_url(@project.id)" do
        helper.authorized_url?(edit_project_path(@project.id)).should be_true
      end

      it "should forbid edit_client_url(@client.id)" do
        helper.authorized_url?(edit_client_path(@client.id)).should be_false
      end

      it "should permit @project" do
        helper.authorized_url?(@project).should be_true
      end

      it "should forbid @client" do
        helper.authorized_url?(@client).should be_false
      end

      it "should permit http://elsewhere.com/something_boring?with_fries=1" do
        helper.authorized_url?("http://elsewhere.com/something_boring?with_fries=1").should be_true
      end
    end

    describe "link_to_if_authorized" do
      it "should emit an <A> tag if authorized" do
        project_link = helper.link_to_if_authorized("Project", @project, :method => :delete)
        project_link.should =~ /^<a/
        project_link.should == helper.link_to("Project", @project, :method => :delete)
      end

      it "should emit just the name if forbidden" do
        helper.link_to_if_authorized("Client", @client).should == "Client"
      end
    end

    it "button_to_if_authorized should should work analogously to button_to" do
      args = ["Delete Project", @project, {:method => :delete}]
      link = helper.button_to_if_authorized(*args.dup)
      link.should == helper.button_to(*args.dup)
      link.should =~ /^<form/
    end

    it "link_to_remote_if_authorized should work analogously to link_to_remote" do
      args = ["Delete Project", {:url => @project}, {:method => :delete}]
      link = helper.link_to_remote_if_authorized(*args.dup)
      link.should == helper.link_to_remote(*args.dup)
      link.should =~ /^<a href/
    end

    it "button_to_remote_if_authorized should work analogously to button_to_remote" do
      args = ["Delete Project", {:url => @project}, {:method => :delete}]
      link = helper.button_to_remote_if_authorized(*args.dup)
      link.should == helper.button_to_remote(*args.dup)
      link.should =~ /^<input/
    end
  end

  describe "authorized" do
    it "should refuse authorization to guests" do
      logout
      helper.should_not be_authorized(:controller => "projects", :action => "show")
    end

    describe "should recognize authorized users" do
      before do
        user = FactoryGirl.create(:user, :groups => [@group])
        authenticate(user)
        FactoryGirl.create(:permission, :group => @group, :controller => "clients", :action => "show")
      end

      it "on a controller level" do
        helper.authorized?(:controller => "projects",
                           :action => "nerf",
                           :id => 7).should == true
      end

      it "on an action level" do
        helper.authorized?(:controller => "clients",
                           :action => "show",
                           :id => 23).should == true
      end

      it "not on the wrong action level" do
        helper.authorized?(:controller => "clients",
                           :action => "bat",
                           :id => 23).should == false
      end

      it "on a record level" do
        helper.authorized?(:controller => "work_units",
                           :action => "edit",
                           :id => 1).should == true
      end

      it "not on the wrong record level" do
        helper.authorized?(:controller => "work_units",
                           :action => "edit",
                           :id => 2).should == false
      end
    end

    describe "should refuse unauthorized users" do
      before do
        authenticate(:user)
      end

      it "on a controller level" do
        helper.authorized?(:controller => "projects",
                           :action => "nerf",
                           :id => 7).should == false
      end

      it "on an action level" do
        helper.authorized?(:controller => "clients",
                           :action => "show",
                           :id => 23).should == false
      end

      it "on a record level" do
        helper.authorized?(:controller => "work_units",
                           :action => "edit",
                           :id => 1).should == false
      end
    end
  end
end
