- set_headline  "Listing Users' Hours"
= javascript_include_tag "/flot/jquery.flot.js"
= javascript_include_tag "/flot/jquery.flot.symbol.js"
= javascript_include_tag "/flot/jquery.flot.axislabels.js"

.button-wrap
  .button.radius#all-user-hours-btn.selected-btn
    All
  .button.radius#total-user-hours-btn
    Total
  .button.radius#billable-user-hours-btn
    Billable
  .button.radius#unbillable-user-hours-btn
    Unbillable

= form_tag hours_reports_path do
  %div.input-container
    %p Start Date
    %input.american_date_entry#start-datepicker{:type => "text", :name => "start_date", :value => @start_date}
  %div.input-container
    %p End Date
    %input.american_date_entry#end-datepicker{:type => "text", :name => "end_date", :value => @end_date}
  = submit_tag "Submit", :id => 'datepicker-submit-btn'

= tabbed_panel do |tp|
  = tp.add_tab('Table') do
    %table.listing
      %tr.week_row
        %td
        - @sundays.each do |sun|
          %td
            %h2= 'Week ending ' + sun
      - @users.each do |u|
        %tr.user_row
          %td
            %h2= u.name
          - (0..@sundays.length-1).each do |week|
            %td
              .billable= @users_with_hours[u.login.to_sym][:billable][week][:hours]
              .unbillable= @users_with_hours[u.login.to_sym][:unbillable][week][:hours]
              .total= @users_with_hours[u.login.to_sym][:total][week][:hours]

  = tp.add_tab('Graph') do
    .graph-container
      #total-graph-container
      #billable-graph-container.hidden
      #unbillable-graph-container.hidden
      #legend
      #checkboxes

:javascript
  $(document).ready(function () {
    var totalHoursDataset = #{ hours_reports_data(@users,@sundays,'total') };
    var billableHoursDataset = #{ hours_reports_data(@users,@sundays,'billable') };
    var unbillableHoursDataset = #{ hours_reports_data(@users,@sundays,'unbillable') };
    var totalHours = [];
    var billableHours = [];
    var unbillableHours = [];
    var users = #{ get_names(@users) };
    var sundays = #{ @sundays };
    var xTicks = #{ xaxis_labels(@sundays) };
    var colors = ["blue","#009900","deeppink","#00CCFF","#6600CC","magenta","orange","darkgray","#66FF66","black"];

    for (var i = 0; i < users.length; i++) {
      totalHours.push(
        { label: users[i],
          data: totalHoursDataset[i],
          points: { symbol: "circle", fillColor: colors[i] },
          color: colors[i] }
      );
      billableHours.push(
        { label: users[i],
          data: billableHoursDataset[i],
          points: { symbol: "circle", fillColor: colors[i] },
          color: colors[i] }
      );
      unbillableHours.push(
        { label: users[i],
          data: unbillableHoursDataset[i],
          points: { symbol: "circle", fillColor: colors[i] },
          color: colors[i] }
      );
    }
    var options = {
      xaxis: {
        axisLabel: 'Ending Sundays',
        axisLabelUseCanvas: true,
        axisLabelPadding: 30,
        ticks: xTicks,
        tickColor: 'transparent'
      },
      yaxis: {
        axisLabel: 'Number of Work Units',
        axisLabelUseCanvas: true,
        axisLabelPadding: 30,
        min: 0,
        max: 100
      },
      points: { show: true },
      lines: { show: true },
      grid: {
        hoverable: true,
        borderWidth: 1
      },
      legend: { show: false }
    };

    var choiceContainer = $("#legend");
    $.each(totalHours, function(key, val) {
      choiceContainer.append(
        '<input type="checkbox" name="' + key + '" checked="checked" id="checkbox' + key + '"> <label style="color:' + colors[key] + '" id="name' + key + '" for="id' + key + '">' + val.label + '</label>' +
        '<br>'
      );
    });

    choiceContainer.find("input").click(plotAccordingToChoicesTotal);
    choiceContainer.find("input").click(plotAccordingToChoicesBillable);
    choiceContainer.find("input").click(plotAccordingToChoicesUnbillable);

    function plotAccordingToChoicesTotal() {
      var data = [];
      choiceContainer.find("input:checked").each(function () {
        var key = $(this).attr("name");
        if (key && totalHours[key]) {
          data.push(totalHours[key]);
        }
      });
      if (data.length > 0) {
        $.plot($("#total-graph-container"), data, options);
      }
    }
    function plotAccordingToChoicesBillable() {
      var data = [];
      choiceContainer.find("input:checked").each(function () {
        var key = $(this).attr("name");
        if (key && billableHours[key]) {
          data.push(billableHours[key]);
        }
      });
      if (data.length > 0) {
        $.plot($("#billable-graph-container"), data, options);
      }
    }
    function plotAccordingToChoicesUnbillable() {
      var data = [];
      choiceContainer.find("input:checked").each(function () {
        var key = $(this).attr("name");
        if (key && unbillableHours[key]) {
          data.push(unbillableHours[key]);
        }
      });
      if (data.length > 0) {
        $.plot($("#unbillable-graph-container"), data, options);
      }
    }

    plotAccordingToChoicesTotal();
    plotAccordingToChoicesBillable();
    plotAccordingToChoicesUnbillable();

    //$.plot("#total-graph-container", totalHours, options);
    //$.plot("#billable-graph-container", billableHours, options);
    //$.plot("#unbillable-graph-container", unbillableHours, options);

    var previousPoint = null;
    $("#total-graph-container").bind("plothover", function (event, pos, item) {
      if (item) {
        if (previousPoint != item.datapoint) {
          previousPoint = item.datapoint;
          $("#tooltip").remove();
          var info = item.series.label + ': ' + item.datapoint[1] + ' hours';
          showTooltip(item.pageX, item.pageY, info);
        }
      } else {
        $("#tooltip").remove();
        previousPoint = null;
      }
    });
    $("#billable-graph-container").bind("plothover", function (event, pos, item) {
      if (item) {
        if (previousPoint != item.datapoint) {
          previousPoint = item.datapoint;
          $("#tooltip").remove();
          showTooltip(item.pageX, item.pageY, item.datapoint[1] + ' hours');
        }
      } else {
        $("#tooltip").remove();
        previousPoint = null;
      }
    });
    $("#unbillable-graph-container").bind("plothover", function (event, pos, item) {
      if (item) {
        if (previousPoint != item.datapoint) {
          previousPoint = item.datapoint;
          $("#tooltip").remove();
          showTooltip(item.pageX, item.pageY, item.datapoint[1] + ' hours');
        }
      } else {
        $("#tooltip").remove();
        previousPoint = null;
      }
    });

    function showTooltip(x, y, contents) {
      $('<div id="tooltip">' + contents + '</div>').css( {
        position: 'absolute',
        display: 'none',
        top: y + 5,
        left: x + 5,
        padding: '8px',
        'background-color': '#f0f0f0',
        opacity: 0.75
      }).appendTo('body').fadeIn(200);
    }
  });
